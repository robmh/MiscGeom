% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/distance_filter.R
\name{distance_filter}
\alias{distance_filter}
\title{Distance-based spatial filtering}
\usage{
distance_filter(df, min_dist, method = "euclidean", shuffle = T)
}
\arguments{
\item{df}{numeric \code{data.frame} with as many rows as points to be included in the analysis.}

\item{min_dist}{\code{numeric}, minimum distance value between points.}

\item{method}{The method to be used (see \link[stats]{dist} for details).}

\item{shuffle}{\code{logical}, set it to \code{TRUE} to randomly shuffle the points in \code{df}.
If not set, algorithm will always start at first row and will move down to the last one.
By default it is set to \code{TRUE}, which means that every time \code{distance_filter} is
run the result will likely be different.}
}
\value{
A \code{data.frame} with as many columns as \code{df} and with rows containing points that are
separated by at least a distance \code{min_dist}. Coordinates for points can be of any dimension, i.e.
\code{df} can have as many columns as needed (distances are calculated with the built-in \code{dist} function).
If all distances are less than \code{min_dist} NA is returned.
}
\description{
Function \code{distance_filter} applies a distance filter to a set of N-dimensional coordinates such that
the resulting points are separated by at least a minimum distance.
}
\examples{

# Random set of 2-D coordinates.
df <- data.frame(x1 = runif(100)*10, x2 = runif(100)*10)

# Compute filtered and shuffled+filtered datasets. If you repeat the lines below
# you'll notice that the "Original" and the "Filtered" plots do not change.
par(mfcol = c(1, 3))
plot(df, xlim = c(0, 10), ylim = c(0, 10), main = "Original")
df_filt <- distance_filter(df, 2, shuffle = F)
plot(df_filt, xlim = c(0, 10), ylim = c(0, 10), main = "Filtered")
df_shuff_filt <- distance_filter(df, 2, shuffle = T)
plot(df_shuff_filt, xlim = c(0, 10), ylim = c(0, 10), main = "Shuffled + Filtered")
par(mfcol = c(1, 1))

}
